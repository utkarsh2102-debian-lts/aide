#!/bin/bash

. "$UPAC_settingsd/10_aide_sourceslist"
VARDIR="/var/lib/apt"
LISTSDIR="$VARDIR/lists"
CACHEDIR="/var/cache/apt"
ARCHIVESDIR="$CACHEDIR/archives"
LOGDIR="/var/log/apt"
IGNORE_ARCHIVES=""
IGNORE_FRQCHG=""
APT_VERS=""

if [ -x "$UPAC_confd/31_local_apt_settings" ]; then
  . "$UPAC_confd/31_local_apt_settings"
  echo "WARNING: usage of $UPAC_confd/31_local_apt_settings is deprecated, please use $UPAC_settingsd/31_aide_apt_settings" >&2
elif [ -r "$UPAC_settingsd/31_aide_apt_settings" ]; then
  # pull in configuration
  . "$UPAC_settingsd/31_aide_apt_settings"
fi

echo '@@define TRANSLATIONS (ca|cs|da|de|de_DE|en|eo|es|eu|fi|fr|hr|hu|id|it|ja|km|ko|nb|nl|pl|pt|pt_BR|ro|ru|sk|sr|sv|uk|vi|zh|zh_CN|zh_TW)'

cat $SOURCESLIST /dev/null | sed 's/ #.*$//' | while read deb uri dist comp; do
  PROTOCOL="$(echo $uri | sed 's|\([^:]\+\).*|\1|')"
  if [ "$PROTOCOL" = "http" ] || [ "$PROTOCOL" = "ftp" ]; then
    HOST="$(echo $uri | sed -e 's|.*//\([^/[:space:]]\+\).*|\1|' -e 's|\.|\\\.|g')"
    HOSTPATH="$(echo $uri | sed -e 's|.*//[^/[:space:]]\+/\?||;s|/$||;s|/|_|g;s|^\(.\+\)$|_\1|' -e 's|\.|\\\.|g')"
    dist="${dist//\//_}"
    if [ -n "$DEBUG" ]; then
      echo "uri $uri"
      echo "HOST $HOST"
      echo "HOSTPATH $HOSTPATH"
    fi
    if [ "$deb" = "deb" ]; then
      for c in $comp; do
        echo "$LISTSDIR/${HOST}${HOSTPATH}_dists_${dist}_${c}_binary-@@{ARCH}_Packages(\.IndexDiff)?$ VarFile"
        echo "$LISTSDIR/${HOST}${HOSTPATH}_dists_${dist}_(InRelease|Release(\.gpg)?)$ VarFile"
        echo "$LISTSDIR/${HOST}${HOSTPATH}_dists_${dist}_${c}_i18n_Translation-@@{TRANSLATIONS}(\.IndexDiff)?$ VarFile"
      done
      echo "!${LISTSDIR}/partial/${HOST}${HOSTPATH}_dists_${dist}_Release\.gpg\.reverify$"
    elif [ "$deb" = "deb-src" ]; then
      for c in $comp; do
        echo "$LISTSDIR/${HOST}${HOSTPATH}_dists_${dist}_${c}_source_(Sources|Release)$ VarFile"
	echo "$LISTSDIR/${HOST}${HOSTPATH}_dists_${dist}_${c}_source_Sources(\.IndexDiff)?$ VarFile"
       echo "$LISTSDIR/${HOST}${HOSTPATH}_dists_${dist}_(InRelease|Release(\.gpg)?)$ VarFile"
      done
    fi
  else
    : # other protocols are not supported. If you feel like they should
    : # please give a good reason and probably a patch.
  fi
  echo -e "\n\n"
done

echo "${LISTSDIR}(/partial)?$ VarDir"
echo "${LISTSDIR}/lock$ VarFile"
echo "${VARDIR}/periodic/(download-upgradeable|update)-stamp$ VarTime"
echo "${VARDIR}/extended_states$ VarFile"
echo "${VARDIR}$ VarDir"

echo "${LOGDIR}/(term|history)\.log$ Log"
echo "${LOGDIR}/(term|history)\.log\.1\.gz$ LoSerMemberLog"
echo "${LOGDIR}/(term|history)\.log\.([2-9]|1[0-1])\.gz$ SerMemberLog"
echo "${LOGDIR}/(term|history)\.log\.12\.gz$ HiSerMemberLog"
echo "${LOGDIR}$ VarDir"

echo "/var/backups/apt\.extended_states\.0$ LowLog"
echo "/var/backups/apt\.extended_states\.1\.gz$ LoSerMemberLog"
echo "/var/backups/apt\.extended_states\.[2345]\.gz$ SerMemberLog"
echo "/var/backups/apt\.extended_states\.6\.gz$ HiSerMemberLog"

if [ "$IGNORE_ARCHIVES" = "yes" ]; then
  echo "!$ARCHIVESDIR/[-a-zA-Z0-9%\.~_+]+_(@@{ARCH}|all)\.deb$"
fi

if [ "$IGNORE_FRQCHG" = "yes" ]; then
  echo "$ARCHIVESDIR(/partial|/lock)?$ VarDir"
  echo "$CACHEDIR/(src)?pkgcache\.bin$ VarFile"
  echo "$CACHEDIR$ VarDir"
fi
